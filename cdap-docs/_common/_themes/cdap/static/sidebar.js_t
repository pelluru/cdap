/*
 * sidebar.js
 * ~~~~~~~~~~
 *
 * This script makes the Sphinx sidebar collapsible.
 *
 * .sphinxsidebar contains .sphinxsidebarwrapper.  This script adds
 * in .sphixsidebar, after .sphinxsidebarwrapper, the #sidebarbutton
 * used to collapse and expand the sidebar.
 *
 * When the sidebar is collapsed the .sphinxsidebarwrapper is hidden
 * and the width of the sidebar and the margin-left of the document
 * are decreased. When the sidebar is expanded the opposite happens.
 * This script saves a per-browser/per-session cookie used to
 * remember the position of the sidebar among the pages.
 * Once the browser is closed the cookie is deleted and the position
 * reset to the default (expanded).
 *
 * :copyright: Copyright 2007-2015 by the Sphinx team, see AUTHORS.
 * :license: BSD, see LICENSE for details.
 *
 * Revised Cask Data, Inc. 2017
 *
 */

$(function() {
  {% if theme_rightsidebar|tobool %}
  {% set side = 'right' %}
  {% set opposite = 'left' %}
  {% set initial_label = '&raquo;' %}
  {% set expand_label = '«' %}
  {% set collapse_label = '»' %}
  {% else %}
  {% set side = 'left' %}
  {% set opposite = 'right' %}
  {% set initial_label = '&laquo;' %}
  {% set expand_label = '»' %}
  {% set collapse_label = '«' %}
  {% endif %}
  {% set sidebar_storage = 'cdap-documentation-sidebar-setting' %}

  // global elements used by the functions.
  // the 'sidebarbutton' element is defined as global after its
  // creation, in the add_sidebar_button function
  var jwindow = $(window);
  var jdocument = $(document);
  var bodywrapper = $('.bodywrapper');
  var footer = $('.footer');
  var sidebar = $('.sphinxsidebar');
  var sidebarwrapper = $('.sphinxsidebarwrapper');
  var adjusted_for_scrollbar // = false;
  
  // if for some reason, the document has no sidebar; do not run into errors
  if (!sidebar.length) return;

  // original margin-left of the bodywrapper and footer and width of the sidebar
  // with the sidebar expanded
  var bw_margin_expanded = bodywrapper.css('margin-{{side}}');
  var ft_margin_expanded = footer.css('margin-{{side}}');
  var ssb_width_expanded = sidebar.width();

  // margin-left of the bodywrapper and footer and width of the sidebar
  // with the sidebar collapsed
  var bw_margin_collapsed = '2.6em';
  var ft_margin_collapsed = '2.6em';
  var ssb_width_collapsed = '1.8em';
  var ssb_width_collapsed_scrollbar = '2.8em';

  // colors used by the current theme
  //   var dark_color = $('.related').css('background-color');
  //   var light_color = $('.document').css('background-color');
  var dark_color = '#EEEEEE'; // used for showing sidebar button when on-mouse-over
  var light_color = '#FFFFFF';
  var type_color = '#444444';
  
  function get_viewport_height() {
    if (window.innerHeight)
      return window.innerHeight;
    else
      return jwindow.height();
  }

  function sidebar_is_collapsed() {
    return sidebarwrapper.is(':not(:visible)');
  }

  function toggle_sidebar() {
    if (sidebar_is_collapsed())
      expand_sidebar();
    else
      collapse_sidebar();
    // adjust the scrolling of the sidebar
    scroll_sidebar();
  }

  function collapse_sidebar() {
    var sidebar_width = ssb_width_collapsed;
    if(has_scrollbar() || adjusted_for_scrollbar || typeof adjusted_for_scrollbar === 'undefined') {
      adjusted_for_scrollbar = true;
      sidebar_width = ssb_width_collapsed_scrollbar;
    } else {
      adjusted_for_scrollbar = false;
    }
    sidebarwrapper.hide();
    sidebar.css('width', sidebar_width);
    bodywrapper.css('margin-{{side}}', bw_margin_collapsed);
    sidebarbutton.css({
        'margin-{{side}}': '0',
        'height': bodywrapper.height()
    });
    sidebarbutton.find('span').text('{{expand_label}}');
    sidebarbutton.attr('title', _('Expand sidebar'));
    footer.css('margin-{{side}}', ft_margin_collapsed);
    save_position_to_storage('collapsed');
  }

  function expand_sidebar() {
    var ssb_wrapper_width = ssb_width_expanded;
    if(has_scrollbar() || adjusted_for_scrollbar || typeof adjusted_for_scrollbar === 'undefined') {
      adjusted_for_scrollbar = true;
      ssb_wrapper_width += -15;
    } else {
      adjusted_for_scrollbar = false;
    }
    bodywrapper.css('margin-{{side}}', bw_margin_expanded);
    sidebar.css('width', ssb_width_expanded);
    sidebarwrapper.css('width', ssb_wrapper_width - 28);
    sidebarwrapper.show();
    sidebarbutton.css({
        'margin-{{side}}': ssb_wrapper_width - 23,
        'height': bodywrapper.height()
    });
    sidebarbutton.find('span').text('{{collapse_label}}');
    sidebarbutton.attr('title', _('Collapse sidebar'));
    footer.css('margin-{{side}}', ft_margin_expanded);
    save_position_to_storage('expanded');
  }

  function add_sidebar_button() {
    sidebarwrapper.css({
        'float': '{{side}}',
        'margin-{{opposite}}': '0',
        'width': ssb_width_expanded - 28
    });
    // create the button
    sidebar.append(
        '<div id="sidebarbutton"><span>{{initial_label}}</span></div>'
    );
    var sidebarbutton = $('#sidebarbutton');
    // find the height of the viewport to center the '<<' in the page
    var viewport_height;
    if (window.innerHeight)
 	  viewport_height = window.innerHeight;
    else
	  viewport_height = $(window).height();
    sidebarbutton.find('span').css({
        'display': 'block',
        'position': 'fixed',
//         'margin-top': (viewport_height - sidebar.position().top - 20) / 2,
        'margin-top': '20px',
        'margin-left': '10px',
        'text-align': 'center'
    });

    sidebarbutton.click(toggle_sidebar);
    sidebarbutton.attr('title', _('Collapse sidebar'));
    sidebarbutton.css({
        'color': type_color,
        'background-color': light_color,
        'font-size': '2.2em',
        'cursor': 'pointer',
        'height': bodywrapper.height(),
        'padding-top': '1px',
        'margin-{{side}}': ssb_width_expanded - 28
    });

    sidebarbutton.hover(
      function () {
          $(this).css('background-color', dark_color);
      },
      function () {
          $(this).css('background-color', light_color);
      }
    );
  }

  function set_position_from_storage() {
    try {
      var sidebar_setting = localStorage.getItem('{{sidebar_storage}}');
    } catch(e) {
      console.log('Unable to get position of sidebar from storage');
      return;
    }
    if (sidebar_setting) {
      if ((sidebar_setting === 'collapsed') && (!sidebar_is_collapsed())) {
        collapse_sidebar();
        return;
      } 
      else if ((sidebar_setting === 'expanded') && (sidebar_is_collapsed())) {
        expand_sidebar();
        return;
      }
    } else {
      console.log('Unable to set using local storage: no sidebar_setting: ' + sidebar_setting);
    }
  }

  function save_position_to_storage(sidebar_setting) {
     localStorage.setItem('{{sidebar_storage}}', sidebar_setting);
  }

  add_sidebar_button();
  var sidebarbutton = $('#sidebarbutton');
  set_position_from_storage();

  function has_scrollbar() {
    // If there is a scrollbar, need to:
    // When expanded:
    // sphinxsidebarwrapper reduce width by 15px (width of scrollbar)
    // sidebarbutton reduce margin-left by 15px (width of scrollbar)
    // When collapsed:
    // sphinxsidebar increase width to 2.8em
    return $('.sphinxsidebar')[0].scrollWidth > $('.sphinxsidebar')[0].clientWidth;
  }

  /* intelligent scrolling */
  function scroll_sidebar() {
    var sidebar_height = sidebarwrapper.height();
    var viewport_height = get_viewport_height();
    var offset = sidebar.position()['top'];
    var wintop = jwindow.scrollTop();
    var winbot = wintop + viewport_height;
    var curtop = sidebarwrapper.position()['top'];
    var curbot = curtop + sidebar_height;
    // does sidebar fit in window?
    if (sidebar_height < viewport_height) {
      // yes: easy case -- always keep at the top
      sidebarwrapper.css('top', $u.min([$u.max([0, wintop - offset - 10]),
                            jdocument.height() - sidebar_height - 200]));
    }
    else {
      // no: only scroll if top/bottom edge of sidebar is at
      // top/bottom edge of window
      if (curtop > wintop && curbot > winbot) {
        sidebarwrapper.css('top', $u.max([wintop - offset - 10, 0]));
      }
      else if (curtop < wintop && curbot < winbot) {
        sidebarwrapper.css('top', $u.min([winbot - sidebar_height - offset - 20,
                              jdocument.height() - sidebar_height - 200]));
      }
    }
  }
  jwindow.scroll(scroll_sidebar);
});
