/*
 * Copyright Â© 2016 Cask Data, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package co.cask.cdap.app.preview;

import co.cask.cdap.internal.app.store.RunRecordMeta;
import co.cask.cdap.metrics.query.MetricsQueryHelper;
import co.cask.cdap.proto.id.ProgramRunId;
import com.google.gson.JsonElement;

import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Interface responsible for managing the lifecycle of a single preview application
 * and retrieving the data generated by that application.
 */
public interface PreviewRunner {

  /**
   * Start the preview of an application.
   * @param request the {@link PreviewRequest} with which preview to be started
   * @throws Exception if there were any error during starting preview
   */
  void startPreview(PreviewRequest<?> request) throws Exception;

  /**
   * Get the status of the preview represented by this {@link PreviewRunner}.
   * @return the status associated with the preview
   */
  PreviewStatus getStatus();

  /**
   * Stop the preview run represented by this {@link PreviewRunner}.
   * @throws Exception if there were any error during stopping preview
   */
  void stopPreview() throws Exception;

  /**
   * Get list of tracers used in the preview run represented by this {@link PreviewRunner}.
   * @return {@link Set} of tracers used in the preview
   */
  Set<String> getTracers();

  /**
   * Get the data associated with the preview run represented by this {@link PreviewRunner}.
   * @param tracerName the name of the tracer used for preview
   * @return the {@link Map} of properties associated with the tracer for a given preview
   */
  Map<String, List<JsonElement>> getData(String tracerName);

  /**
   * Get the run id of the program executed as a part of preview.
   * @return the {@link ProgramRunId} associated with the preview
   */
  ProgramRunId getProgramRunId();

  /**
   * Get the run record of the program executed as a part of preview.
   * @return the {@link RunRecordMeta} associated with the preview
   */
  RunRecordMeta getRunRecord();

  /**
   * Get the helper object to query for metrics for the preview run.
   * @return the {@link MetricsQueryHelper} associated with the preview
   */
  MetricsQueryHelper getMetricsQueryHelper();
}
